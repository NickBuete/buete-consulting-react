version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: buete-consulting-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: buete_consulting
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - buete-network

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: buete-consulting-backend
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/buete_consulting
      JWT_SECRET: dev-jwt-secret-change-in-production-min-32-chars
      NODE_ENV: production
      PORT: 4000
      # AWS credentials (optional - only if you want to test Bedrock locally)
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      BEDROCK_REGION: ${BEDROCK_REGION:-us-east-1}
      BEDROCK_MODEL_ID: ${BEDROCK_MODEL_ID:-anthropic.claude-3-5-sonnet-20241022-v2:0}
      BEDROCK_MAX_TOKENS: ${BEDROCK_MAX_TOKENS:-4096}
      BEDROCK_TEMPERATURE: ${BEDROCK_TEMPERATURE:-0.3}
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - buete-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  buete-network:
    driver: bridge
